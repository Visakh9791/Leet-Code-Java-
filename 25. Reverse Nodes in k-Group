/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;

        
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode prev = dummy, end = dummy;

        while (true) {
            
            for (int i = 0; i < k && end != null; i++) end = end.next;
            if (end == null) break;

            
            ListNode start = prev.next;
            ListNode nextGroup = end.next;

            end.next = null; 

            
            prev.next = reverse(start);

            
            start.next = nextGroup;

            
            prev = start;
            end = start;
        }

        return dummy.next;
    }

    
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }
}
