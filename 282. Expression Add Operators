class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> result = new ArrayList<>();
        dfs(result, "", num, target, 0, 0, 0);
        return result;
    }

    private void dfs(List<String> result, String path, String num, int target, int pos, long eval, long prev) {
        if (pos == num.length()) {
            if (eval == target) {
                result.add(path);
            }
            return;
        }

        for (int i = pos; i < num.length(); i++) {
            
            if (i != pos && num.charAt(pos) == '0') break;

            String currStr = num.substring(pos, i + 1);
            long currNum = Long.parseLong(currStr);

            if (pos == 0) {
                
                dfs(result, path + currStr, num, target, i + 1, currNum, currNum);
            } else {
                
                dfs(result, path + "+" + currStr, num, target, i + 1, eval + currNum, currNum);
                
                dfs(result, path + "-" + currStr, num, target, i + 1, eval - currNum, -currNum);
                
                dfs(result, path + "*" + currStr, num, target, i + 1, eval - prev + prev * currNum, prev * currNum);
            }
        }
    }
}
